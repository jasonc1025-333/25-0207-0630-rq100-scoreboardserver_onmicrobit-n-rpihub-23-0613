{"entries":[{"timestamp":1738979743630,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n"],[-1,"// Very-Key Notes:\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Bot (Network: Server)\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// ** ~ HiTec HS-55\n// \n// ** MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * To prevent flooding this bot-server with messages, have controller-client delay approx. 20ms to still maintain real-time response after each send-tx.\n// \n// * Also, 1 Char Msg Max, 2 Char or more caused buffer-overrun and serial broke down, froze\n// \n// * on event AB not work, but A or B does work reliably\n// \n// * also 'on button A', 'on button B', and 'on button A+B' do work without 'on event' blocks present: event triggers only on ButtonEvtUp reliably\n// \n// ** Also if held down longer than 2 sec, event will be aborted\n// \n// * Thus, avoid condition: 'button A/B/A+B is pressed' block since not reliable\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Controller-Joystick (Network-Client)\n// \n// * Yahboom Joystick\n// \n// ** https://www.yahboom.net/study/SGH\n// \n// ** https://github.com/lzty634158/GHBit\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * 2nd level of conditions not reliable involving 'name', 'value' and 'button press'\n// \n// * Prevent Boundary Issues with Rollover/FlipMSB, Thus Force Largest-Boundaried-Tilt, etc.: Constrain Raw Tilts: -90,+90 or -60,+60\n// \n// * Disable code (pulling out of stack) is same as removing code and is effective for redeeming used disk/ram space\n// \n// * Deadzone was 20, yet do 30 for safety buffer\n// \n// * button_Debounce_TriggerDisableMsec: 'Pause appears to solve timing issue of multiple tx where gears are skipped, thus slow down tx: 100ms too fast - not help, 200ms best, 500ms better, 1s, 2s good\n// \n// * Do not allow 'on shake/freefall/any_motion_event' for Bot since collision can accidentally trigger this\n// \n// * MicroBit A/B Buttons not work well with LED Display, so use 'show string' instead\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// ** 20msec :) not bad-but some lag, 50msec :) seems just right, 100msec not bad-but some lag\n// \n// ** network_Throttle_PausePerCpuCycle_Int = 50\n// \n// ** Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// 2021-0307\n// \n// * Round does work, yet for Quadrant 2, 4, opposite polarity causes X.Y Pair not work, since will not sum correctly, thus must offset with 255 for all positive message-transfer\n// \n// * false = 0, true > 0 (non-zero)\n// \n// 2021-0308-0900\n// \n// * Seems Javascript more robust debugger:error-finder vs. Python\n// \n// * Makecode: only changes honored on the latest web-version in case duplicate window\n// \n// 2021-0311\n// \n// * Weird compass rotation is skewed moving forward and backward in a cyclical way, does distort the number. Stationary okay, but added motion not good.  Wheels don't need to move.\n// \n// 2021-0313\n// \n// * P16 and P8 are the only pins not reserved for anything else, thus free for Servo 1 &  2\n// \n// ** yet P8 hard to find, so use p15 instead\n// \n// ** https://makecode.microbit.org/device/pins\n// \n// * Seems that servos are reversed orientation.  Look from outside observer, not driver-perspective\n// \n// * Seems that  Lego Servos are 270-degrees range (vs180)\n// \n// 22-1126\n// \n// * Seems best that switch to true 'Bool' type vs 'Bool_Int' though more convenient for 'serial_prints', not good for customized api_blocks\n// \n// 22-1217\n// \n// * Delauren Total-Quad-Arm Lift: 3 x AA = 3 x 24g/AA = 75 g\n// \n// ** 100 g too much\n// \n// ** LEGO Technic Weight Block 50g\n// \n// 22-1218\n// \n// * TYJ used Medium 2KG-Torque Twin Motors can lift 200g w/o much strain, 250g with straining. Direct axle shaft best for max torque.  Avoid Dog-Gear for Max Torque.  These motors stop being strong enough to cut/break/severe/pinch off your finger.  ; )\nfunction screen_Show_Command_Func(screen_X_In: number, screen_Y_In: number) {\n    led.plotBrightness(screen_X_In, screen_Y_In, screenBrightness_Hi_DEFAULT_INT)\n    // too long: 50ms, 100ms, 500ms\n    basic.pause(20)\n    led.unplot(screen_X_In, screen_Y_In)\n    screen_Show_DiagnosticDashboard_Func()\n}\nfunction screen_Show_DiagnosticDashboard_Func() {\n    screen_Clear_Fn(4, 4)\n    doGroupChannelShow_Func()\n}\n// Key Notes\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// * HiTec HS-55\n// \n// * MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\n// \n// 2021-0228\n// \n// * DC Motors\n// \n// ** \\ e.g. 155, 205, 255 (which is close enough to 255 during testing); delta 50\n// \n// ** 70% of 255 = 178.5 = 180 rounded-up; also (155+205)/2 = 180\n// \n// ** Stick w/ 155 (vs 180) for most significant difference vs Gear 2\n// \n// * KEY BUG: 'round' not seems to work, thus do manually\n// \n// * Button 'Release' Not Reliable, Seems Buggy\n// \n// * Use Digital-Pin as a DIP Switch for Setup\n// \n// ** Use P16 since easiest to locate (at top) for quick change\n// \n// ** For Controller-Joystick: Yahboom: Appears P16 defaults to Low when Open-Circuit\n// \n// ** Remove P16-Dependency since unreliable open-circuit value: either 0 or 1\n// \n// * Tried 10, but maybe not enough granularity, assuming have new, same-aged dc-motors.\n// \n// ** Resume back to 5 (smallest significant)\n// \n// ** Even need more, then recommend replacing hardware: new pair of dc-motors.\n// \n// 2021-0301\n// \n// * For Critical Configs, Best to send absolute value ('on radio received name value') vs relative values (on radio received 'receivedString'), for robustness vs. dropped packets\n// \n// ** This software config should be for small fine-tuning\n// \n// * Tilt (/Rotation/Accelerometer) = 't_*' (Prefix-Header For Radio Messages)\n// \n// ** WARNING: Seems like First condition ok when along, but when 2nd added, 1st is ignored. Thus 2-Level Logic Not Reliable\n// \n// ** Original Motor0to255:(255,-255) -> (510,0) Add 255 here: Keep all positive since cannot radio two negative #, subtract 255 at destination\n// \n// * Deactivate 'calibrate compass' since will force calibrate each new run of this code, which would be too much and inconvenient.  By default, calibrate occurs upon each flash, which is sufficient.\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// * Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// ** As long avoid 400 msec consuming LED-displays\n// \n// ** Thus keep at 0 msec\n// \n// * Sonar\n// \n// ** Standard/Default can be overridden by Master-Server\n// \n// ** 15, 30, 45\n// \n// 2021-0309\n// \n// * 'serial write value 'name'='value'' uses ':' vs '='\n// \n// 2021-0311\n// \n// * Calibration: Swirl Around Like Panning for Gold, Moving Marble Around on Flat-Plane\nfunction setup_Network_Fn() {\n    if (true) {\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 25\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 1\n        radio.setGroup(network_GroupChannel_MyBotAndController_Base0_Int)\n        if (true) {\n            network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 100) % 10\n            network_GroupChannel_MyBotAndController_Digit_Tens_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 10) % 10\n            network_GroupChannel_MyBotAndController_Digit_Ones_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 1) % 10\n        }\n        if (true) {\n            // * 3 sec  TOO SLOW? >> try 2 >> try 1 WILL CAUSE TOO MUCH NETWORK OVERHEAD\n            network_HiMessage_Frequency_SEC_INT = 1\n        }\n        if (true) {\n            serial.redirectToUSB()\n        }\n    }\n}\ninput.onLogoEvent(TouchButtonEvent.LongPressed, function () {\n    quest_Note_1.quest_Show_String_For_Note_Small_Func(\n        \"23-0508-0740\"\n    )\n    if (_debug_Show_Priority_Hi_Bool) {\n        _debug_Show_Priority_Hi_Bool = false\n        basic.clearScreen()\n        led.plot(2, 4)\n        basic.pause(2000)\n    } else {\n        _debug_Show_Priority_Hi_Bool = true\n        basic.clearScreen()\n        led.plot(2, 0)\n        basic.pause(2000)\n    }\n})\ninput.onButtonPressed(Button.A, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Fn(\n        \"Reset Scores\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Func(\n        \"Reset all non-BotID fields to Zero\"\n    )\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = true\n    if (true) {\n        for (let scoreboard_BotSingle_ArrayOfText_List_1D of scoreboard_BotsAll_ArrayListOfText_2D) {\n            scoreboard_BotSingle_ArrayOfText_List_1D[3] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[5] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[7] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[9] = \"0\"\n        }\n        quest_Note_2.quest_Show_String_For_Note_Small_Fn(\n            \"Wait for reset to 0 to stabilize/complete\"\n        )\n        basic.clearScreen()\n        for (let index = 0; index <= 2; index++) {\n            basic.showNumber(3 - index)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(1, quest_Time_Units_Enum.Seconds)\n        }\n        basic.clearScreen()\n    }\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n})\n// * General Notes\n// \n// * 2019-0519-0340\n// \n// ** DFRobot Driver Expansion Board\n// \n// * 2019-0525-09-HAA TYJ first complete joystick XY\n// \n// * Technical Notes\n// \n// * 2019-1019\n// \n// ** Create more responsiveness, no DeadZone\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// ** Delete 'index_y2' (tried to reuse but '844' error)\n// \n// ** Tried to reuse 'item' but probably is a system var\n// \n// ** Remove unused 'button_AandB_Countdown_CpuCycles', 'buttonA_Then_B_On'\n// \n// ** Rename used-only-once-via-set:\n// \n// *** 'dashboardDisplay_Brightness_HI' to 'servo_Pan_Degrees' :)+\n// \n// *** 'groupChannel_Digit_MIN' to 'servo_Pan_Degrees'\n// \n// *** 'groupChannel_Digit_MAX' to 'servo_Tilt_Degrees'\n// \n// \n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0224-1215\n// \n// ** Network Test w/ Gaming Server\n// \n// *** w/ Sonar: Simulated or Real\n// \n// *** w/ BotId: Random or Real\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// *** Delete obsolete 'joystick_Value'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// Micro-Servo 9G A0090 (Sparkfun)\n// \n// ~ HiTec HS-55\n// \n// MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// 0 no\n// \n// 250 0\n// \n// 500 no\n// \n// >> 750: 45\n// \n// 1000 90 - 10 = 80\n// \n// 1250 90 + 10 = 100\n// \n// >> 1500 90 + 30\n// \n// 1750 180 - 30\n// \n// 2000 170\n// \n// 2250 190\n// \n// >> 2500 225 = 180 + 30/45\n// \n// 2750 no\n// \n// 3000 no\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\nfunction setup_BotAndController_Fn() {\n    if (true) {\n        _codeComment_AsText = \"System Constants\"\n        if (true) {\n            _system_BotAndController_Mode_As_SETUP_INT = 1\n            _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 2\n        }\n        if (true) {\n            _bool_FALSE_0_ForDigitalPinReadWriteOnly_INT = 0\n            _bool_TRUE_1_ForDigitalPinReadWriteOnly_INT = 1\n        }\n        if (true) {\n            _system_InvalidNumber_NEG_999_INT = -999\n        }\n    }\n    if (true) {\n        _codeComment_AsText = \"System Vars\"\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_SETUP_INT\n        _system_ScreenFreeze_ForOverrideMessage_Bool = false\n    }\n    if (true) {\n        _codeComment_AsText = \"Bot & Controller Setup\"\n        if (true) {\n            screenBrightness_Hi_DEFAULT_INT = 255\n            // lowest 1 is still visible :)+\n            screenBrightness_MI_INT = 7\n            // 127 not low enough, 15 is better, 1 too low, 7 seems good, try 8\n            screenBrightness_LO_INT = 1\n            screenBrightness_Heartbeat_Count_Int = 0\n            // * [30..-5]by0.5 >> 1 sec one-way-trip, [50..-10]by1, [50-..-25]by1, [100..-50]by2, [200..-100]by4, off too long: [250..-50]by4\n            if (true) {\n                // 255 max too high, stays bright too long; 50 not bad, try 30 for more 1sec heartbeat\n                screenBrightness_Heartbeat_Count_MAX_INT = 250\n                // 0 not low enough, try -15 for more of 50% duty on/off cycle, try -10 for less off, try -5\n                screenBrightness_HeartBeat_Count_MIN_INT = -50\n                // * 1 >> 0.5\n                screenBrightness_Heartbeat_Count_DELTA_INT = 4\n            }\n        }\n        if (true) {\n            // * 500ms seems good, 1000ms no improvement, so stay w/ 500ms\n            // * Seems that 3000ms seems best for min. lag issues, but not pragmatic,\n            // * so stick with 500ms as recent test shows it as sufficient, vs 400, 300, 200, 100ms.\n            _debug_Show_CpuCycleDelay_MILLISEC_INT = 500\n        }\n    }\n    if (true) {\n        network_DataPacket_Rcvd_FieldNames_ArrayListOfText = [\"#\", \"L\", \"M\"]\n        scoreboard_ColumnFrontend_TitleNames_ArrayListOfText = [\n            \"Bot#\",\n            \"Light+\",\n            \"Light=\",\n            \"Magnet+\",\n            \"Magnet=\"\n        ]\n        scoreboard_ColumnBackend_FieldNames_ArrayListOfText = [\n            \"B#\",\n            \"L+\",\n            \"L=\",\n            \"M+\",\n            \"M=\"\n        ]\n        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D = [\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[0],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[1],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[2],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[3],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[4],\n            \"0\"\n        ]\n        scoreboard_BotSingle_ArrayOfText_List_1D2 = []\n        scoreboard_BotsAll_ArrayListOfText_2D = []\n    }\n}\nfunction doGroupChannelShow_Func() {\n    if (true) {\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Hundreds_Int, 0, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Tens_Int, 1, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Ones_Int, 3, 0)\n    }\n}\ninput.onButtonPressed(Button.AB, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Fn(\n        \"Switch Scoreboard Modes\"\n    )\n    if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n        scoreboard_Server_SerialPrint_RawScores_Bool = false\n        scoreboard_Server_SerialPrint_FormattedScores_Bool = true\n    } else {\n        scoreboard_Server_SerialPrint_RawScores_Bool = true\n        scoreboard_Server_SerialPrint_FormattedScores_Bool = false\n    }\n    screen_ModeStatus_Fn()\n})\n// To Insure Both at Synchronized States, Both Bot and Controller Must Start/Re-Start at 'setup_and_startup' State (e.g. for Manual Config Overrides, Debug-Serial-Prints, etc. to work)\n// * Important News\n// ** 'receivedstring': 18 char max\n// ** 'name': 8 char max for this project\nradio.onReceivedString(function (receivedString) {\n    if (!(scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool)) {\n        network_DataPacket_Rcvd_Str = receivedString\n        if (_debug_Show_Priority_Hi_Bool) {\n            serial.writeString(\"* A: Raw String: \")\n            serial.writeLine(\"\\\"\" + network_DataPacket_Rcvd_Str + \"\\\"\")\n        }\n        if (true) {\n            network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList = network_DataPacket_Rcvd_Str.split(\",\")\n            network_DataPacket_Rcvd_MessageHeader_Key_AsBotId_Str = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].substr(0, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].indexOf(\":\"))\n            quest_Note_1.quest_Show_String_For_Note_Small_Fn(\n                \"Blank last argument (<< NOT SEEM TO WORK) -or- Use current string_length (which is more than enough) to insure read to 'end_of_string'\"\n            )\n            network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].length)\n        }\n        if (true) {\n            scoreboard_Bot_Found_Bool = false\n            for (let scoreboard_botsingle_arraylistoftext_1d of scoreboard_BotsAll_ArrayListOfText_2D) {\n                if (_debug_Show_Priority_Hi_Bool) {\n                    serial.writeLine(\"* B1:\" + scoreboard_botsingle_arraylistoftext_1d[0] + \"|\" + scoreboard_botsingle_arraylistoftext_1d[1] + \"|\" + network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str + \"|\")\n                }\n                quest_Note_4.quest_Show_String_For_Note_Small_Fn(\n                    \"Hardcode 'Index = 1' to access actual 'BotId'\"\n                )\n                if (scoreboard_botsingle_arraylistoftext_1d[1] == network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str) {\n                    scoreboard_Bot_Found_Bool = true\n                    if (_debug_Show_Priority_Hi_Bool) {\n                        serial.writeString(\"* C1>\")\n                        for (let scoreboard_botsingle_columndata_1d of scoreboard_botsingle_arraylistoftext_1d) {\n                            serial.writeString(\"\" + scoreboard_botsingle_columndata_1d + \"|\")\n                        }\n                        serial.writeLine(\"* C1<\")\n                    }\n                    if (true) {\n                        scoreboard_botsingle_arraylistoftext_1d[3] = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].length)\n                        scoreboard_botsingle_arraylistoftext_1d[5] = convertToText(parseFloat(scoreboard_botsingle_arraylistoftext_1d[3]) + parseFloat(scoreboard_botsingle_arraylistoftext_1d[5]))\n                    }\n                    if (true) {\n                        scoreboard_botsingle_arraylistoftext_1d[7] = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].length)\n                        scoreboard_botsingle_arraylistoftext_1d[9] = convertToText(parseFloat(scoreboard_botsingle_arraylistoftext_1d[7]) + parseFloat(scoreboard_botsingle_arraylistoftext_1d[9]))\n                    }\n                    if (_debug_Show_Priority_Hi_Bool) {\n                        serial.writeString(\"* C2>\")\n                        for (let scoreboard_botsingle_columndata_1d2 of scoreboard_botsingle_arraylistoftext_1d) {\n                            serial.writeString(\"\" + scoreboard_botsingle_columndata_1d2 + \"|\")\n                        }\n                        serial.writeLine(\"* C2<\")\n                    }\n                }\n            }\n        }\n        if (!(scoreboard_Bot_Found_Bool)) {\n            if (true) {\n                scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D = []\n                if (true) {\n                    for (let index = 0; index < 10; index++) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D.push(\"\")\n                    }\n                }\n                for (let network_datapacket_rcvd_a_keyvaluepair of network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList) {\n                    keyvaluepair_key = network_datapacket_rcvd_a_keyvaluepair.substr(0, network_datapacket_rcvd_a_keyvaluepair.indexOf(\":\"))\n                    quest_Note_1.quest_Show_String_For_Note_Small_Fn(\n                        \"Blank last argument (<< NOT SEEM TO WORK) -or- Use current string_length (which is more than enough) to insure read to 'end_of_string'\"\n                    )\n                    keyvaluepair_value = network_datapacket_rcvd_a_keyvaluepair.substr(network_datapacket_rcvd_a_keyvaluepair.indexOf(\":\") + 1, network_datapacket_rcvd_a_keyvaluepair.length)\n                    quest_Note_1.quest_Show_String_For_Note_Big_Fn(\n                        \"23-0518-0805\"\n                    )\n                    if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[0]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[1] = keyvaluepair_value\n                    } else if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[1]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[3] = keyvaluepair_value\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[5] = keyvaluepair_value\n                    } else if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[2]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[7] = keyvaluepair_value\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[9] = keyvaluepair_value\n                    } else {\n                        serial.writeLine(\"*** ERROR: 2023-0517-1450 ***\")\n                    }\n                }\n                if (_debug_Show_Priority_Hi_Bool) {\n                    serial.writeString(\"* D1>\")\n                    for (let scoreboard_botsingle_columndata_1d3 of scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D) {\n                        serial.writeString(\"\" + scoreboard_botsingle_columndata_1d3 + \"|\")\n                    }\n                    serial.writeLine(\"* D1<\")\n                }\n            }\n            scoreboard_BotsAll_ArrayListOfText_2D.push(scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D)\n            if (_debug_Show_Priority_Hi_Bool) {\n                serial.writeString(\"* D2>\")\n                for (let scoreboard_botsingle_columndata_1d4 of scoreboard_BotsAll_ArrayListOfText_2D[scoreboard_BotsAll_ArrayListOfText_2D.length - 1]) {\n                    serial.writeString(\"\" + scoreboard_botsingle_columndata_1d4 + \"|\")\n                }\n                serial.writeLine(\"* D2<\")\n            }\n            quest_Note_1.quest_Show_String_For_Note_Big_Fn(\n                \"23-0518-0800\"\n            )\n        }\n        if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n            _codeComment_AsText = \"* E: Forward to Server on Raspberry Pi\"\n            serial.writeLine(\"\" + (network_DataPacket_Rcvd_Str))\n        }\n    }\n})\ninput.onButtonPressed(Button.B, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Fn(\n        \"Freeze Scores\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Fn(\n        \"Refrain from using Button 'A' since overlaps with Startup Press 'A' or 'B'\"\n    )\n    if (scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) {\n        scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n        basic.clearScreen()\n        led.plot(2, 4)\n        basic.pause(2000)\n    } else {\n        basic.clearScreen()\n        led.plot(2, 0)\n        basic.pause(2000)\n        scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = true\n    }\n})\nfunction screen_ScrollText_Fn(text_Str_In: string) {\n    // Fragment the substrings to be interruptible between each 'show string' block\n    parsed_Substrings_As_Array = text_Str_In.split(\",\")\n    for (let parsed_Substring_As_Str of parsed_Substrings_As_Array) {\n        basic.showString(\"\" + (parsed_Substring_As_Str))\n        if (_system_BotAndController_Mode_Int != _system_BotAndController_Mode_As_SETUP_INT) {\n            break;\n        }\n    }\n}\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    _codeComment_AsText = \"23-0226-1430\"\n})\nfunction screen_ModeStatus_Fn() {\n    if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n        if (true) {\n            led.plot(0, 2)\n            led.unplot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(2, quest_Time_Units_Enum.Seconds)\n        }\n    } else if (scoreboard_Server_SerialPrint_FormattedScores_Bool) {\n        if (true) {\n            led.plot(0, 2)\n            led.plot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(2, quest_Time_Units_Enum.Seconds)\n        }\n    } else {\n        if (true) {\n            led.unplot(0, 2)\n            led.unplot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(2, quest_Time_Units_Enum.Seconds)\n        }\n    }\n}\nfunction screen_Clear_Fn(row_X_Max_In: number, col_Y_Max_In: number) {\n    for (let index_X = 0; index_X <= row_X_Max_In; index_X++) {\n        for (let index_Y = 0; index_Y <= col_Y_Max_In; index_Y++) {\n            led.unplot(index_X, index_Y)\n        }\n    }\n}\nfunction doGroupChannel_Show_PerDigit_Func(singleDigit_In: number, OffsetX_In: number, OffsetY_In: number) {\n    for (let index222 = 0; index222 <= singleDigit_In - 1; index222++) {\n        led.plotBrightness(Math.idiv(index222, 5) + OffsetX_In, index222 % 5 + OffsetY_In, screenBrightness_MI_INT)\n    }\n}\nlet parsed_Substrings_As_Array: string[] = []\nlet keyvaluepair_value = \"\"\nlet keyvaluepair_key = \"\"\nlet scoreboard_Bot_Found_Bool = false\nlet network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str = \"\"\nlet network_DataPacket_Rcvd_MessageHeader_Key_AsBotId_Str = \"\"\nlet network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList: string[] = []\nlet network_DataPacket_Rcvd_Str = \"\"\nlet scoreboard_BotSingle_ArrayOfText_List_1D2: number[] = []\nlet scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D: string[] = []\nlet scoreboard_ColumnBackend_FieldNames_ArrayListOfText: string[] = []\nlet scoreboard_ColumnFrontend_TitleNames_ArrayListOfText: string[] = []\nlet network_DataPacket_Rcvd_FieldNames_ArrayListOfText: string[] = []\nlet _debug_Show_CpuCycleDelay_MILLISEC_INT = 0\nlet screenBrightness_Heartbeat_Count_DELTA_INT = 0\nlet screenBrightness_HeartBeat_Count_MIN_INT = 0\nlet screenBrightness_Heartbeat_Count_MAX_INT = 0\nlet screenBrightness_Heartbeat_Count_Int = 0\nlet screenBrightness_LO_INT = 0\nlet screenBrightness_MI_INT = 0\nlet _system_ScreenFreeze_ForOverrideMessage_Bool = false\nlet _system_BotAndController_Mode_Int = 0\nlet _system_InvalidNumber_NEG_999_INT = 0\nlet _bool_TRUE_1_ForDigitalPinReadWriteOnly_INT = 0\nlet _bool_FALSE_0_ForDigitalPinReadWriteOnly_INT = 0\nlet _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 0\nlet _system_BotAndController_Mode_As_SETUP_INT = 0\nlet scoreboard_BotsAll_ArrayListOfText_2D: string[][] = []\nlet network_HiMessage_Frequency_SEC_INT = 0\nlet network_GroupChannel_MyBotAndController_Digit_Ones_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Tens_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 0\nlet screenBrightness_Hi_DEFAULT_INT = 0\nlet _debug_Show_Priority_Hi_Bool = false\nlet scoreboard_Server_SerialPrint_RawScores_Bool = false\nlet scoreboard_Server_SerialPrint_FormattedScores_Bool = false\nlet scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\nlet network_GroupChannel_MyBotAndController_Base0_Int = 0\nlet network_GroupChannel_ScoreboardServer_BASE0_INT = 0\nlet _codeComment_AsText = \"\"\n// * Ok icon to look upside_down when micro:bit upside_down\nif (true) {\n    _codeComment_AsText = \"'S' = 'S'erver\"\n    basic.showLeds(`\n        . # # # #\n        # . . . .\n        # # # # #\n        . . . . #\n        # # # # .\n        `)\n    // * 3, 2, 1.5sec\n    quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(1.5, quest_Time_Units_Enum.Seconds)\n}\nif (true) {\n    _codeComment_AsText = \"ScoreBoard_Server\"\n    // Constant Channel # for Master Server, which Receives Everyone's Score. Use 255 vs 0, since 0 could be easily not not used by normal users\n    network_GroupChannel_ScoreboardServer_BASE0_INT = 255\n    // * Good Stress Test: 199 (to test all dots for 10's, 1's; 255 (to test all dots for 100's: 1,2)\n    network_GroupChannel_MyBotAndController_Base0_Int = network_GroupChannel_ScoreboardServer_BASE0_INT\n}\nif (true) {\n    setup_BotAndController_Fn()\n    setup_Network_Fn()\n}\nif (true) {\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n    scoreboard_Server_SerialPrint_FormattedScores_Bool = false\n    scoreboard_Server_SerialPrint_RawScores_Bool = true\n    quest_Note_4.quest_Show_String_For_Note_Small_Fn(\n        \"'Debug On' for Testing\"\n    )\n    _debug_Show_Priority_Hi_Bool = false\n}\nloops.everyInterval(2000, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Fn(\n        \"Network Heartbeat\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Fn(\n        \"Little Less Frequent to Not Tie Up Much Resources\"\n    )\n    quest_Note_1.quest_Show_String_For_Note_Small_Fn(\n        \"Heartbeat 'I'm Alive' Status\"\n    )\n    led.toggle(0, 4)\n})\nloops.everyInterval(2000, function () {\n    if (!(scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) && scoreboard_Server_SerialPrint_FormattedScores_Bool) {\n        serial.writeLine(\"----- RoboQuest Scoreboard Server -----\")\n        for (let value4 of scoreboard_ColumnFrontend_TitleNames_ArrayListOfText) {\n            serial.writeString(\"\" + \"                    \".substr(0, 20 - value4.length) + value4)\n        }\n        serial.writeLine(\"\")\n        for (let value42 of scoreboard_BotsAll_ArrayListOfText_2D) {\n            for (let value023 of value42) {\n                serial.writeString(\"\" + \"                    \".substr(0, 10 - value023.length) + value023)\n            }\n            serial.writeLine(\"\")\n        }\n        serial.writeLine(\"\")\n    } else if (scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) {\n        serial.writeLine(\"*** Freeze Scores ***\")\n    }\n})\nbasic.forever(function () {\n    quest_Note_1.quest_Show_String_For_Note_Big_Fn(\n        \"23-0518-0720\"\n    )\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_SETUP_INT) {\n        basic.showLeds(`\n            . # # # #\n            # . . . .\n            # # # # #\n            . . . . #\n            # # # # .\n            `)\n        quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Fn(2, quest_Time_Units_Enum.Seconds)\n        screen_Show_DiagnosticDashboard_Func()\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT\n    }\n})\nbasic.forever(function () {\n    quest_Note_1.quest_Show_String_For_Note_Big_Fn(\n        \"23-0518-0710\"\n    )\n})\nbasic.forever(function () {\n    _codeComment_AsText = \"23-0226-1430\"\n})\nbasic.forever(function () {\n    screenBrightness_Heartbeat_Count_Int += screenBrightness_Heartbeat_Count_DELTA_INT\n    // * Use '<= and >=' vs '< and >' since do not want to go past boundaries when changing values\n    if (screenBrightness_Heartbeat_Count_Int <= screenBrightness_HeartBeat_Count_MIN_INT || screenBrightness_Heartbeat_Count_Int >= screenBrightness_Heartbeat_Count_MAX_INT) {\n        screenBrightness_Heartbeat_Count_DELTA_INT = -1 * screenBrightness_Heartbeat_Count_DELTA_INT\n    }\n})\nloops.everyInterval(5000, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Fn(\n        \"Show Mode Status\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Fn(\n        \"Less Frequent to Not Tie Up Much Resources\"\n    )\n    screen_ModeStatus_Fn()\n})\n"]],"start1":0,"start2":0,"length1":33744,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"23-1006-1820-RQ100-QuestCustomBlocks-Wukong-Oled\": \"github:jasonc1025-333/23-1006-1820-rq100-questcustomblocks-wukong-oled#v0.11.3\""],[0,"\n"],[1,""],[0,"    "]],"start1":183,"start2":183,"length1":151,"length2":9},{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":280,"start2":280,"length1":32,"length2":31}]}]},{"timestamp":1738980337632,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Reset"]],"start1":9825,"start2":9825,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n            \"W"]],"start1":10454,"start2":10454,"length1":35,"length2":33},{"diffs":[[0,"nTimer_F"],[-1,"unc"],[1,"n"],[0,"(1, ques"]],"start1":10721,"start2":10721,"length1":19,"length2":17},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Switc"]],"start1":16893,"start2":16893,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n              "]],"start1":18326,"start2":18326,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n              "]],"start1":19308,"start2":19308,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n              "]],"start1":22214,"start2":22214,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n              "]],"start1":22656,"start2":22656,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n              "]],"start1":24681,"start2":24681,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Freez"]],"start1":25053,"start2":25053,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Refra"]],"start1":25137,"start2":25137,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"'Debu"]],"start1":30835,"start2":30835,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Netwo"]],"start1":31009,"start2":31009,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Littl"]],"start1":31097,"start2":31097,"length1":35,"length2":33},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Heart"]],"start1":31217,"start2":31217,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"23-05"]],"start1":32242,"start2":32242,"length1":35,"length2":33},{"diffs":[[0,"g_For_Note_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"23-05"]],"start1":32853,"start2":32853,"length1":35,"length2":33},{"diffs":[[0,"te_Big_F"],[-1,"unc"],[1,"n"],[0,"(\n      "]],"start1":33557,"start2":33557,"length1":19,"length2":17},{"diffs":[[0,"For_Note_Small_F"],[-1,"unc"],[1,"n"],[0,"(\n        \"Less "]],"start1":33636,"start2":33636,"length1":35,"length2":33}]}]},{"timestamp":1738980609794,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"nTimer_F"],[-1,"unc"],[1,"n"],[0,"(2, ques"]],"start1":26414,"start2":26414,"length1":19,"length2":17}]}]},{"timestamp":1738981349394,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"CountdownTimer_F"],[-1,"unc"],[1,"n"],[0,"(2, quest_Time_U"]],"start1":26668,"start2":26668,"length1":35,"length2":33}]}]},{"timestamp":1738981350084,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"CountdownTimer_F"],[-1,"unc"],[1,"n"],[0,"(2, quest_Time_U"]],"start1":26878,"start2":26878,"length1":35,"length2":33},{"diffs":[[0,"nTimer_F"],[-1,"unc"],[1,"n"],[0,"(1.5, qu"]],"start1":30049,"start2":30049,"length1":19,"length2":17},{"diffs":[[0,"CountdownTimer_F"],[-1,"unc"],[1,"n"],[0,"(2, quest_Time_U"]],"start1":32618,"start2":32618,"length1":35,"length2":33}]}]},{"timestamp":1738981352988,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"|,{u398EMLi_.Q5ZH`m;\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"SslbnZSsz/29vwz`5RU[\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]}]},{"timestamp":1738982040577,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":417,"start2":417,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1738979743629,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \" 23-0613-1510-rq100-scoreboardserver_onmicrobit-n-rpihub\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1738982040577,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"\n// Very-Key Notes:\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Bot (Network: Server)\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// ** ~ HiTec HS-55\n// \n// ** MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * To prevent flooding this bot-server with messages, have controller-client delay approx. 20ms to still maintain real-time response after each send-tx.\n// \n// * Also, 1 Char Msg Max, 2 Char or more caused buffer-overrun and serial broke down, froze\n// \n// * on event AB not work, but A or B does work reliably\n// \n// * also 'on button A', 'on button B', and 'on button A+B' do work without 'on event' blocks present: event triggers only on ButtonEvtUp reliably\n// \n// ** Also if held down longer than 2 sec, event will be aborted\n// \n// * Thus, avoid condition: 'button A/B/A+B is pressed' block since not reliable\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Controller-Joystick (Network-Client)\n// \n// * Yahboom Joystick\n// \n// ** https://www.yahboom.net/study/SGH\n// \n// ** https://github.com/lzty634158/GHBit\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * 2nd level of conditions not reliable involving 'name', 'value' and 'button press'\n// \n// * Prevent Boundary Issues with Rollover/FlipMSB, Thus Force Largest-Boundaried-Tilt, etc.: Constrain Raw Tilts: -90,+90 or -60,+60\n// \n// * Disable code (pulling out of stack) is same as removing code and is effective for redeeming used disk/ram space\n// \n// * Deadzone was 20, yet do 30 for safety buffer\n// \n// * button_Debounce_TriggerDisableMsec: 'Pause appears to solve timing issue of multiple tx where gears are skipped, thus slow down tx: 100ms too fast - not help, 200ms best, 500ms better, 1s, 2s good\n// \n// * Do not allow 'on shake/freefall/any_motion_event' for Bot since collision can accidentally trigger this\n// \n// * MicroBit A/B Buttons not work well with LED Display, so use 'show string' instead\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// ** 20msec :) not bad-but some lag, 50msec :) seems just right, 100msec not bad-but some lag\n// \n// ** network_Throttle_PausePerCpuCycle_Int = 50\n// \n// ** Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// 2021-0307\n// \n// * Round does work, yet for Quadrant 2, 4, opposite polarity causes X.Y Pair not work, since will not sum correctly, thus must offset with 255 for all positive message-transfer\n// \n// * false = 0, true > 0 (non-zero)\n// \n// 2021-0308-0900\n// \n// * Seems Javascript more robust debugger:error-finder vs. Python\n// \n// * Makecode: only changes honored on the latest web-version in case duplicate window\n// \n// 2021-0311\n// \n// * Weird compass rotation is skewed moving forward and backward in a cyclical way, does distort the number. Stationary okay, but added motion not good.  Wheels don't need to move.\n// \n// 2021-0313\n// \n// * P16 and P8 are the only pins not reserved for anything else, thus free for Servo 1 &  2\n// \n// ** yet P8 hard to find, so use p15 instead\n// \n// ** https://makecode.microbit.org/device/pins\n// \n// * Seems that servos are reversed orientation.  Look from outside observer, not driver-perspective\n// \n// * Seems that  Lego Servos are 270-degrees range (vs180)\n// \n// 22-1126\n// \n// * Seems best that switch to true 'Bool' type vs 'Bool_Int' though more convenient for 'serial_prints', not good for customized api_blocks\n// \n// 22-1217\n// \n// * Delauren Total-Quad-Arm Lift: 3 x AA = 3 x 24g/AA = 75 g\n// \n// ** 100 g too much\n// \n// ** LEGO Technic Weight Block 50g\n// \n// 22-1218\n// \n// * TYJ used Medium 2KG-Torque Twin Motors can lift 200g w/o much strain, 250g with straining. Direct axle shaft best for max torque.  Avoid Dog-Gear for Max Torque.  These motors stop being strong enough to cut/break/severe/pinch off your finger.  ; )\nfunction screen_Show_Command_Func(screen_X_In: number, screen_Y_In: number) {\n    led.plotBrightness(screen_X_In, screen_Y_In, screenBrightness_Hi_DEFAULT_INT)\n    // too long: 50ms, 100ms, 500ms\n    basic.pause(20)\n    led.unplot(screen_X_In, screen_Y_In)\n    screen_Show_DiagnosticDashboard_Func()\n}\nfunction screen_Show_DiagnosticDashboard_Func() {\n    screen_Clear_Fn(4, 4)\n    doGroupChannelShow_Func()\n}\n// Key Notes\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// * HiTec HS-55\n// \n// * MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\n// \n// 2021-0228\n// \n// * DC Motors\n// \n// ** \\ e.g. 155, 205, 255 (which is close enough to 255 during testing); delta 50\n// \n// ** 70% of 255 = 178.5 = 180 rounded-up; also (155+205)/2 = 180\n// \n// ** Stick w/ 155 (vs 180) for most significant difference vs Gear 2\n// \n// * KEY BUG: 'round' not seems to work, thus do manually\n// \n// * Button 'Release' Not Reliable, Seems Buggy\n// \n// * Use Digital-Pin as a DIP Switch for Setup\n// \n// ** Use P16 since easiest to locate (at top) for quick change\n// \n// ** For Controller-Joystick: Yahboom: Appears P16 defaults to Low when Open-Circuit\n// \n// ** Remove P16-Dependency since unreliable open-circuit value: either 0 or 1\n// \n// * Tried 10, but maybe not enough granularity, assuming have new, same-aged dc-motors.\n// \n// ** Resume back to 5 (smallest significant)\n// \n// ** Even need more, then recommend replacing hardware: new pair of dc-motors.\n// \n// 2021-0301\n// \n// * For Critical Configs, Best to send absolute value ('on radio received name value') vs relative values (on radio received 'receivedString'), for robustness vs. dropped packets\n// \n// ** This software config should be for small fine-tuning\n// \n// * Tilt (/Rotation/Accelerometer) = 't_*' (Prefix-Header For Radio Messages)\n// \n// ** WARNING: Seems like First condition ok when along, but when 2nd added, 1st is ignored. Thus 2-Level Logic Not Reliable\n// \n// ** Original Motor0to255:(255,-255) -> (510,0) Add 255 here: Keep all positive since cannot radio two negative #, subtract 255 at destination\n// \n// * Deactivate 'calibrate compass' since will force calibrate each new run of this code, which would be too much and inconvenient.  By default, calibrate occurs upon each flash, which is sufficient.\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// * Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// ** As long avoid 400 msec consuming LED-displays\n// \n// ** Thus keep at 0 msec\n// \n// * Sonar\n// \n// ** Standard/Default can be overridden by Master-Server\n// \n// ** 15, 30, 45\n// \n// 2021-0309\n// \n// * 'serial write value 'name'='value'' uses ':' vs '='\n// \n// 2021-0311\n// \n// * Calibration: Swirl Around Like Panning for Gold, Moving Marble Around on Flat-Plane\nfunction setup_Network_Fn() {\n    if (true) {\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 25\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 1\n        radio.setGroup(network_GroupChannel_MyBotAndController_Base0_Int)\n        if (true) {\n            network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 100) % 10\n            network_GroupChannel_MyBotAndController_Digit_Tens_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 10) % 10\n            network_GroupChannel_MyBotAndController_Digit_Ones_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 1) % 10\n        }\n        if (true) {\n            // * 3 sec  TOO SLOW? >> try 2 >> try 1 WILL CAUSE TOO MUCH NETWORK OVERHEAD\n            network_HiMessage_Frequency_SEC_INT = 1\n        }\n        if (true) {\n            serial.redirectToUSB()\n        }\n    }\n}\ninput.onLogoEvent(TouchButtonEvent.LongPressed, function () {\n    quest_Note_1.quest_Show_String_For_Note_Small_Func(\n        \"23-0508-0740\"\n    )\n    if (_debug_Show_Priority_Hi_Bool) {\n        _debug_Show_Priority_Hi_Bool = false\n        basic.clearScreen()\n        led.plot(2, 4)\n        basic.pause(2000)\n    } else {\n        _debug_Show_Priority_Hi_Bool = true\n        basic.clearScreen()\n        led.plot(2, 0)\n        basic.pause(2000)\n    }\n})\ninput.onButtonPressed(Button.A, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Func(\n        \"Reset Scores\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Func(\n        \"Reset all non-BotID fields to Zero\"\n    )\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = true\n    if (true) {\n        for (let scoreboard_BotSingle_ArrayOfText_List_1D of scoreboard_BotsAll_ArrayListOfText_2D) {\n            scoreboard_BotSingle_ArrayOfText_List_1D[3] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[5] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[7] = \"0\"\n            scoreboard_BotSingle_ArrayOfText_List_1D[9] = \"0\"\n        }\n        quest_Note_2.quest_Show_String_For_Note_Small_Func(\n            \"Wait for reset to 0 to stabilize/complete\"\n        )\n        basic.clearScreen()\n        for (let index = 0; index <= 2; index++) {\n            basic.showNumber(3 - index)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(1, quest_Time_Units_Enum.Seconds)\n        }\n        basic.clearScreen()\n    }\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n})\n// * General Notes\n// \n// * 2019-0519-0340\n// \n// ** DFRobot Driver Expansion Board\n// \n// * 2019-0525-09-HAA TYJ first complete joystick XY\n// \n// * Technical Notes\n// \n// * 2019-1019\n// \n// ** Create more responsiveness, no DeadZone\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// ** Delete 'index_y2' (tried to reuse but '844' error)\n// \n// ** Tried to reuse 'item' but probably is a system var\n// \n// ** Remove unused 'button_AandB_Countdown_CpuCycles', 'buttonA_Then_B_On'\n// \n// ** Rename used-only-once-via-set:\n// \n// *** 'dashboardDisplay_Brightness_HI' to 'servo_Pan_Degrees' :)+\n// \n// *** 'groupChannel_Digit_MIN' to 'servo_Pan_Degrees'\n// \n// *** 'groupChannel_Digit_MAX' to 'servo_Tilt_Degrees'\n// \n// \n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0224-1215\n// \n// ** Network Test w/ Gaming Server\n// \n// *** w/ Sonar: Simulated or Real\n// \n// *** w/ BotId: Random or Real\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// *** Delete obsolete 'joystick_Value'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// Micro-Servo 9G A0090 (Sparkfun)\n// \n// ~ HiTec HS-55\n// \n// MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// 0 no\n// \n// 250 0\n// \n// 500 no\n// \n// >> 750: 45\n// \n// 1000 90 - 10 = 80\n// \n// 1250 90 + 10 = 100\n// \n// >> 1500 90 + 30\n// \n// 1750 180 - 30\n// \n// 2000 170\n// \n// 2250 190\n// \n// >> 2500 225 = 180 + 30/45\n// \n// 2750 no\n// \n// 3000 no\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\nfunction setup_BotAndController_Fn() {\n    if (true) {\n        _codeComment_AsText = \"System Constants\"\n        if (true) {\n            _system_BotAndController_Mode_As_SETUP_INT = 1\n            _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 2\n        }\n        if (true) {\n            _bool_FALSE_0_ForDigitalPinReadWriteOnly_INT = 0\n            _bool_TRUE_1_ForDigitalPinReadWriteOnly_INT = 1\n        }\n        if (true) {\n            _system_InvalidNumber_NEG_999_INT = -999\n        }\n    }\n    if (true) {\n        _codeComment_AsText = \"System Vars\"\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_SETUP_INT\n        _system_ScreenFreeze_ForOverrideMessage_Bool = false\n    }\n    if (true) {\n        _codeComment_AsText = \"Bot & Controller Setup\"\n        if (true) {\n            screenBrightness_Hi_DEFAULT_INT = 255\n            // lowest 1 is still visible :)+\n            screenBrightness_MI_INT = 7\n            // 127 not low enough, 15 is better, 1 too low, 7 seems good, try 8\n            screenBrightness_LO_INT = 1\n            screenBrightness_Heartbeat_Count_Int = 0\n            // * [30..-5]by0.5 >> 1 sec one-way-trip, [50..-10]by1, [50-..-25]by1, [100..-50]by2, [200..-100]by4, off too long: [250..-50]by4\n            if (true) {\n                // 255 max too high, stays bright too long; 50 not bad, try 30 for more 1sec heartbeat\n                screenBrightness_Heartbeat_Count_MAX_INT = 250\n                // 0 not low enough, try -15 for more of 50% duty on/off cycle, try -10 for less off, try -5\n                screenBrightness_HeartBeat_Count_MIN_INT = -50\n                // * 1 >> 0.5\n                screenBrightness_Heartbeat_Count_DELTA_INT = 4\n            }\n        }\n        if (true) {\n            // * 500ms seems good, 1000ms no improvement, so stay w/ 500ms\n            // * Seems that 3000ms seems best for min. lag issues, but not pragmatic,\n            // * so stick with 500ms as recent test shows it as sufficient, vs 400, 300, 200, 100ms.\n            _debug_Show_CpuCycleDelay_MILLISEC_INT = 500\n        }\n    }\n    if (true) {\n        network_DataPacket_Rcvd_FieldNames_ArrayListOfText = [\"#\", \"L\", \"M\"]\n        scoreboard_ColumnFrontend_TitleNames_ArrayListOfText = [\n            \"Bot#\",\n            \"Light+\",\n            \"Light=\",\n            \"Magnet+\",\n            \"Magnet=\"\n        ]\n        scoreboard_ColumnBackend_FieldNames_ArrayListOfText = [\n            \"B#\",\n            \"L+\",\n            \"L=\",\n            \"M+\",\n            \"M=\"\n        ]\n        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D = [\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[0],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[1],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[2],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[3],\n            \"0\",\n            scoreboard_ColumnBackend_FieldNames_ArrayListOfText[4],\n            \"0\"\n        ]\n        scoreboard_BotSingle_ArrayOfText_List_1D2 = []\n        scoreboard_BotsAll_ArrayListOfText_2D = []\n    }\n}\nfunction doGroupChannelShow_Func() {\n    if (true) {\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Hundreds_Int, 0, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Tens_Int, 1, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Ones_Int, 3, 0)\n    }\n}\ninput.onButtonPressed(Button.AB, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Func(\n        \"Switch Scoreboard Modes\"\n    )\n    if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n        scoreboard_Server_SerialPrint_RawScores_Bool = false\n        scoreboard_Server_SerialPrint_FormattedScores_Bool = true\n    } else {\n        scoreboard_Server_SerialPrint_RawScores_Bool = true\n        scoreboard_Server_SerialPrint_FormattedScores_Bool = false\n    }\n    screen_ModeStatus_Fn()\n})\n// To Insure Both at Synchronized States, Both Bot and Controller Must Start/Re-Start at 'setup_and_startup' State (e.g. for Manual Config Overrides, Debug-Serial-Prints, etc. to work)\n// * Important News\n// ** 'receivedstring': 18 char max\n// ** 'name': 8 char max for this project\nradio.onReceivedString(function (receivedString) {\n    if (!(scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool)) {\n        network_DataPacket_Rcvd_Str = receivedString\n        if (_debug_Show_Priority_Hi_Bool) {\n            serial.writeString(\"* A: Raw String: \")\n            serial.writeLine(\"\\\"\" + network_DataPacket_Rcvd_Str + \"\\\"\")\n        }\n        if (true) {\n            network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList = network_DataPacket_Rcvd_Str.split(\",\")\n            network_DataPacket_Rcvd_MessageHeader_Key_AsBotId_Str = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].substr(0, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].indexOf(\":\"))\n            quest_Note_1.quest_Show_String_For_Note_Small_Func(\n                \"Blank last argument (<< NOT SEEM TO WORK) -or- Use current string_length (which is more than enough) to insure read to 'end_of_string'\"\n            )\n            network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[0].length)\n        }\n        if (true) {\n            scoreboard_Bot_Found_Bool = false\n            for (let scoreboard_botsingle_arraylistoftext_1d of scoreboard_BotsAll_ArrayListOfText_2D) {\n                if (_debug_Show_Priority_Hi_Bool) {\n                    serial.writeLine(\"* B1:\" + scoreboard_botsingle_arraylistoftext_1d[0] + \"|\" + scoreboard_botsingle_arraylistoftext_1d[1] + \"|\" + network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str + \"|\")\n                }\n                quest_Note_4.quest_Show_String_For_Note_Small_Func(\n                    \"Hardcode 'Index = 1' to access actual 'BotId'\"\n                )\n                if (scoreboard_botsingle_arraylistoftext_1d[1] == network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str) {\n                    scoreboard_Bot_Found_Bool = true\n                    if (_debug_Show_Priority_Hi_Bool) {\n                        serial.writeString(\"* C1>\")\n                        for (let scoreboard_botsingle_columndata_1d of scoreboard_botsingle_arraylistoftext_1d) {\n                            serial.writeString(\"\" + scoreboard_botsingle_columndata_1d + \"|\")\n                        }\n                        serial.writeLine(\"* C1<\")\n                    }\n                    if (true) {\n                        scoreboard_botsingle_arraylistoftext_1d[3] = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[1].length)\n                        scoreboard_botsingle_arraylistoftext_1d[5] = convertToText(parseFloat(scoreboard_botsingle_arraylistoftext_1d[3]) + parseFloat(scoreboard_botsingle_arraylistoftext_1d[5]))\n                    }\n                    if (true) {\n                        scoreboard_botsingle_arraylistoftext_1d[7] = network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].substr(network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].indexOf(\":\") + 1, network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList[2].length)\n                        scoreboard_botsingle_arraylistoftext_1d[9] = convertToText(parseFloat(scoreboard_botsingle_arraylistoftext_1d[7]) + parseFloat(scoreboard_botsingle_arraylistoftext_1d[9]))\n                    }\n                    if (_debug_Show_Priority_Hi_Bool) {\n                        serial.writeString(\"* C2>\")\n                        for (let scoreboard_botsingle_columndata_1d2 of scoreboard_botsingle_arraylistoftext_1d) {\n                            serial.writeString(\"\" + scoreboard_botsingle_columndata_1d2 + \"|\")\n                        }\n                        serial.writeLine(\"* C2<\")\n                    }\n                }\n            }\n        }\n        if (!(scoreboard_Bot_Found_Bool)) {\n            if (true) {\n                scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D = []\n                if (true) {\n                    for (let index = 0; index < 10; index++) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D.push(\"\")\n                    }\n                }\n                for (let network_datapacket_rcvd_a_keyvaluepair of network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList) {\n                    keyvaluepair_key = network_datapacket_rcvd_a_keyvaluepair.substr(0, network_datapacket_rcvd_a_keyvaluepair.indexOf(\":\"))\n                    quest_Note_1.quest_Show_String_For_Note_Small_Func(\n                        \"Blank last argument (<< NOT SEEM TO WORK) -or- Use current string_length (which is more than enough) to insure read to 'end_of_string'\"\n                    )\n                    keyvaluepair_value = network_datapacket_rcvd_a_keyvaluepair.substr(network_datapacket_rcvd_a_keyvaluepair.indexOf(\":\") + 1, network_datapacket_rcvd_a_keyvaluepair.length)\n                    quest_Note_1.quest_Show_String_For_Note_Big_Func(\n                        \"23-0518-0805\"\n                    )\n                    if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[0]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[1] = keyvaluepair_value\n                    } else if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[1]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[3] = keyvaluepair_value\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[5] = keyvaluepair_value\n                    } else if (keyvaluepair_key == network_DataPacket_Rcvd_FieldNames_ArrayListOfText[2]) {\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[7] = keyvaluepair_value\n                        scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D[9] = keyvaluepair_value\n                    } else {\n                        serial.writeLine(\"*** ERROR: 2023-0517-1450 ***\")\n                    }\n                }\n                if (_debug_Show_Priority_Hi_Bool) {\n                    serial.writeString(\"* D1>\")\n                    for (let scoreboard_botsingle_columndata_1d3 of scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D) {\n                        serial.writeString(\"\" + scoreboard_botsingle_columndata_1d3 + \"|\")\n                    }\n                    serial.writeLine(\"* D1<\")\n                }\n            }\n            scoreboard_BotsAll_ArrayListOfText_2D.push(scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D)\n            if (_debug_Show_Priority_Hi_Bool) {\n                serial.writeString(\"* D2>\")\n                for (let scoreboard_botsingle_columndata_1d4 of scoreboard_BotsAll_ArrayListOfText_2D[scoreboard_BotsAll_ArrayListOfText_2D.length - 1]) {\n                    serial.writeString(\"\" + scoreboard_botsingle_columndata_1d4 + \"|\")\n                }\n                serial.writeLine(\"* D2<\")\n            }\n            quest_Note_1.quest_Show_String_For_Note_Big_Func(\n                \"23-0518-0800\"\n            )\n        }\n        if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n            _codeComment_AsText = \"* E: Forward to Server on Raspberry Pi\"\n            serial.writeLine(\"\" + (network_DataPacket_Rcvd_Str))\n        }\n    }\n})\ninput.onButtonPressed(Button.B, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Func(\n        \"Freeze Scores\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Func(\n        \"Refrain from using Button 'A' since overlaps with Startup Press 'A' or 'B'\"\n    )\n    if (scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) {\n        scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n        basic.clearScreen()\n        led.plot(2, 4)\n        basic.pause(2000)\n    } else {\n        basic.clearScreen()\n        led.plot(2, 0)\n        basic.pause(2000)\n        scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = true\n    }\n})\nfunction screen_ScrollText_Fn(text_Str_In: string) {\n    // Fragment the substrings to be interruptible between each 'show string' block\n    parsed_Substrings_As_Array = text_Str_In.split(\",\")\n    for (let parsed_Substring_As_Str of parsed_Substrings_As_Array) {\n        basic.showString(\"\" + (parsed_Substring_As_Str))\n        if (_system_BotAndController_Mode_Int != _system_BotAndController_Mode_As_SETUP_INT) {\n            break;\n        }\n    }\n}\ninput.onLogoEvent(TouchButtonEvent.Pressed, function () {\n    _codeComment_AsText = \"23-0226-1430\"\n})\nfunction screen_ModeStatus_Fn() {\n    if (scoreboard_Server_SerialPrint_RawScores_Bool) {\n        if (true) {\n            led.plot(0, 2)\n            led.unplot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(2, quest_Time_Units_Enum.Seconds)\n        }\n    } else if (scoreboard_Server_SerialPrint_FormattedScores_Bool) {\n        if (true) {\n            led.plot(0, 2)\n            led.plot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(2, quest_Time_Units_Enum.Seconds)\n        }\n    } else {\n        if (true) {\n            led.unplot(0, 2)\n            led.unplot(0, 3)\n            quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(2, quest_Time_Units_Enum.Seconds)\n        }\n    }\n}\nfunction screen_Clear_Fn(row_X_Max_In: number, col_Y_Max_In: number) {\n    for (let index_X = 0; index_X <= row_X_Max_In; index_X++) {\n        for (let index_Y = 0; index_Y <= col_Y_Max_In; index_Y++) {\n            led.unplot(index_X, index_Y)\n        }\n    }\n}\nfunction doGroupChannel_Show_PerDigit_Func(singleDigit_In: number, OffsetX_In: number, OffsetY_In: number) {\n    for (let index222 = 0; index222 <= singleDigit_In - 1; index222++) {\n        led.plotBrightness(Math.idiv(index222, 5) + OffsetX_In, index222 % 5 + OffsetY_In, screenBrightness_MI_INT)\n    }\n}\nlet parsed_Substrings_As_Array: string[] = []\nlet keyvaluepair_value = \"\"\nlet keyvaluepair_key = \"\"\nlet scoreboard_Bot_Found_Bool = false\nlet network_DataPacket_Rcvd_MessageHeader_Value_AsBotId_Str = \"\"\nlet network_DataPacket_Rcvd_MessageHeader_Key_AsBotId_Str = \"\"\nlet network_DataPacket_Rcvd_ParsedIntoKeyValuePairs_ArrayList: string[] = []\nlet network_DataPacket_Rcvd_Str = \"\"\nlet scoreboard_BotSingle_ArrayOfText_List_1D2: number[] = []\nlet scoreboard_BotSingle_KeyValuePairs_ArrayListOfText_1D: string[] = []\nlet scoreboard_ColumnBackend_FieldNames_ArrayListOfText: string[] = []\nlet scoreboard_ColumnFrontend_TitleNames_ArrayListOfText: string[] = []\nlet network_DataPacket_Rcvd_FieldNames_ArrayListOfText: string[] = []\nlet _debug_Show_CpuCycleDelay_MILLISEC_INT = 0\nlet screenBrightness_Heartbeat_Count_DELTA_INT = 0\nlet screenBrightness_HeartBeat_Count_MIN_INT = 0\nlet screenBrightness_Heartbeat_Count_MAX_INT = 0\nlet screenBrightness_Heartbeat_Count_Int = 0\nlet screenBrightness_LO_INT = 0\nlet screenBrightness_MI_INT = 0\nlet _system_ScreenFreeze_ForOverrideMessage_Bool = false\nlet _system_BotAndController_Mode_Int = 0\nlet _system_InvalidNumber_NEG_999_INT = 0\nlet _bool_TRUE_1_ForDigitalPinReadWriteOnly_INT = 0\nlet _bool_FALSE_0_ForDigitalPinReadWriteOnly_INT = 0\nlet _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 0\nlet _system_BotAndController_Mode_As_SETUP_INT = 0\nlet scoreboard_BotsAll_ArrayListOfText_2D: string[][] = []\nlet network_HiMessage_Frequency_SEC_INT = 0\nlet network_GroupChannel_MyBotAndController_Digit_Ones_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Tens_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 0\nlet screenBrightness_Hi_DEFAULT_INT = 0\nlet _debug_Show_Priority_Hi_Bool = false\nlet scoreboard_Server_SerialPrint_RawScores_Bool = false\nlet scoreboard_Server_SerialPrint_FormattedScores_Bool = false\nlet scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\nlet network_GroupChannel_MyBotAndController_Base0_Int = 0\nlet network_GroupChannel_ScoreboardServer_BASE0_INT = 0\nlet _codeComment_AsText = \"\"\n// * Ok icon to look upside_down when micro:bit upside_down\nif (true) {\n    _codeComment_AsText = \"'S' = 'S'erver\"\n    basic.showLeds(`\n        . # # # #\n        # . . . .\n        # # # # #\n        . . . . #\n        # # # # .\n        `)\n    // * 3, 2, 1.5sec\n    quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(1.5, quest_Time_Units_Enum.Seconds)\n}\nif (true) {\n    _codeComment_AsText = \"ScoreBoard_Server\"\n    // Constant Channel # for Master Server, which Receives Everyone's Score. Use 255 vs 0, since 0 could be easily not not used by normal users\n    network_GroupChannel_ScoreboardServer_BASE0_INT = 255\n    // * Good Stress Test: 199 (to test all dots for 10's, 1's; 255 (to test all dots for 100's: 1,2)\n    network_GroupChannel_MyBotAndController_Base0_Int = network_GroupChannel_ScoreboardServer_BASE0_INT\n}\nif (true) {\n    setup_BotAndController_Fn()\n    setup_Network_Fn()\n}\nif (true) {\n    scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool = false\n    scoreboard_Server_SerialPrint_FormattedScores_Bool = false\n    scoreboard_Server_SerialPrint_RawScores_Bool = true\n    quest_Note_4.quest_Show_String_For_Note_Small_Func(\n        \"'Debug On' for Testing\"\n    )\n    _debug_Show_Priority_Hi_Bool = false\n}\nloops.everyInterval(2000, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Func(\n        \"Network Heartbeat\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Func(\n        \"Little Less Frequent to Not Tie Up Much Resources\"\n    )\n    quest_Note_1.quest_Show_String_For_Note_Small_Func(\n        \"Heartbeat 'I'm Alive' Status\"\n    )\n    led.toggle(0, 4)\n})\nloops.everyInterval(2000, function () {\n    if (!(scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) && scoreboard_Server_SerialPrint_FormattedScores_Bool) {\n        serial.writeLine(\"----- RoboQuest Scoreboard Server -----\")\n        for (let value4 of scoreboard_ColumnFrontend_TitleNames_ArrayListOfText) {\n            serial.writeString(\"\" + \"                    \".substr(0, 20 - value4.length) + value4)\n        }\n        serial.writeLine(\"\")\n        for (let value42 of scoreboard_BotsAll_ArrayListOfText_2D) {\n            for (let value023 of value42) {\n                serial.writeString(\"\" + \"                    \".substr(0, 10 - value023.length) + value023)\n            }\n            serial.writeLine(\"\")\n        }\n        serial.writeLine(\"\")\n    } else if (scoreboard_BotsAll_ArrayList_2D_StopFreeze_Bool) {\n        serial.writeLine(\"*** Freeze Scores ***\")\n    }\n})\nbasic.forever(function () {\n    quest_Note_1.quest_Show_String_For_Note_Big_Func(\n        \"23-0518-0720\"\n    )\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_SETUP_INT) {\n        basic.showLeds(`\n            . # # # #\n            # . . . .\n            # # # # #\n            . . . . #\n            # # # # .\n            `)\n        quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(2, quest_Time_Units_Enum.Seconds)\n        screen_Show_DiagnosticDashboard_Func()\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT\n    }\n})\nbasic.forever(function () {\n    quest_Note_1.quest_Show_String_For_Note_Big_Func(\n        \"23-0518-0710\"\n    )\n})\nbasic.forever(function () {\n    _codeComment_AsText = \"23-0226-1430\"\n})\nbasic.forever(function () {\n    screenBrightness_Heartbeat_Count_Int += screenBrightness_Heartbeat_Count_DELTA_INT\n    // * Use '<= and >=' vs '< and >' since do not want to go past boundaries when changing values\n    if (screenBrightness_Heartbeat_Count_Int <= screenBrightness_HeartBeat_Count_MIN_INT || screenBrightness_Heartbeat_Count_Int >= screenBrightness_Heartbeat_Count_MAX_INT) {\n        screenBrightness_Heartbeat_Count_DELTA_INT = -1 * screenBrightness_Heartbeat_Count_DELTA_INT\n    }\n})\nloops.everyInterval(5000, function () {\n    quest_Note_3.quest_Show_String_For_Note_Big_Func(\n        \"Show Mode Status\"\n    )\n    quest_Note_2.quest_Show_String_For_Note_Small_Func(\n        \"Less Frequent to Not Tie Up Much Resources\"\n    )\n    screen_ModeStatus_Fn()\n})\n","README.md":"","pxt.json":"{\n    \"name\": \" 23-0613-1510-rq100-scoreboardserver_onmicrobit-n-rpihub\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"23-1006-1820-RQ100-QuestCustomBlocks-Wukong-Oled\": \"github:jasonc1025-333/23-1006-1820-rq100-questcustomblocks-wukong-oled#v0.11.3\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1738982040586}